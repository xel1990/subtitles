1
00:00:00,919 --> 00:00:04,570  
 
in the last video we saw what closure is

2
00:00:04,570 --> 00:00:04,580  
in the last video we saw what closure is
 

3
00:00:04,580 --> 00:00:07,150  
in the last video we saw what closure is
let's repeat the same exact example we

4
00:00:07,150 --> 00:00:07,160  
let's repeat the same exact example we
 

5
00:00:07,160 --> 00:00:10,660  
let's repeat the same exact example we
used and show a few additional ones that

6
00:00:10,660 --> 00:00:10,670  
used and show a few additional ones that
 

7
00:00:10,670 --> 00:00:13,120  
used and show a few additional ones that
are a little bit more complex so to

8
00:00:13,120 --> 00:00:13,130  
are a little bit more complex so to
 

9
00:00:13,130 --> 00:00:15,550  
are a little bit more complex so to
start off here I created a program and

10
00:00:15,550 --> 00:00:15,560  
start off here I created a program and
 

11
00:00:15,560 --> 00:00:18,220  
start off here I created a program and
it's just a function this function has

12
00:00:18,220 --> 00:00:18,230  
it's just a function this function has
 

13
00:00:18,230 --> 00:00:20,679  
it's just a function this function has
another function nested inside of it so

14
00:00:20,679 --> 00:00:20,689  
another function nested inside of it so
 

15
00:00:20,689 --> 00:00:23,200  
another function nested inside of it so
we have three available scopes to us the

16
00:00:23,200 --> 00:00:23,210  
we have three available scopes to us the
 

17
00:00:23,210 --> 00:00:24,929  
we have three available scopes to us the
first scope is the global scope

18
00:00:24,929 --> 00:00:24,939  
first scope is the global scope
 

19
00:00:24,939 --> 00:00:27,429  
first scope is the global scope
represented in green so our whole

20
00:00:27,429 --> 00:00:27,439  
represented in green so our whole
 

21
00:00:27,439 --> 00:00:30,159  
represented in green so our whole
program is sitting inside of this global

22
00:00:30,159 --> 00:00:30,169  
program is sitting inside of this global
 

23
00:00:30,169 --> 00:00:33,970  
program is sitting inside of this global
scope next our Foo function creates its

24
00:00:33,970 --> 00:00:33,980  
scope next our Foo function creates its
 

25
00:00:33,980 --> 00:00:36,220  
scope next our Foo function creates its
own scope as well and it's everything

26
00:00:36,220 --> 00:00:36,230  
own scope as well and it's everything
 

27
00:00:36,230 --> 00:00:39,160  
own scope as well and it's everything
inside of the Foos opening and closing

28
00:00:39,160 --> 00:00:39,170  
inside of the Foos opening and closing
 

29
00:00:39,170 --> 00:00:42,130  
inside of the Foos opening and closing
code brackets so everything from here to

30
00:00:42,130 --> 00:00:42,140  
code brackets so everything from here to
 

31
00:00:42,140 --> 00:00:45,849  
code brackets so everything from here to
here last but not least we have our taz

32
00:00:45,849 --> 00:00:45,859  
here last but not least we have our taz
 

33
00:00:45,859 --> 00:00:48,250  
here last but not least we have our taz
function and our taz function creates

34
00:00:48,250 --> 00:00:48,260  
function and our taz function creates
 

35
00:00:48,260 --> 00:00:50,500  
function and our taz function creates
its own scope as well it's everything

36
00:00:50,500 --> 00:00:50,510  
its own scope as well it's everything
 

37
00:00:50,510 --> 00:00:53,459  
its own scope as well it's everything
from its opening and closing code blocks

38
00:00:53,459 --> 00:00:53,469  
from its opening and closing code blocks
 

39
00:00:53,469 --> 00:00:57,250  
from its opening and closing code blocks
so the scope is finally created when our

40
00:00:57,250 --> 00:00:57,260  
so the scope is finally created when our
 

41
00:00:57,260 --> 00:01:01,810  
so the scope is finally created when our
program executes so on line 13 foo is

42
00:01:01,810 --> 00:01:01,820  
program executes so on line 13 foo is
 

43
00:01:01,820 --> 00:01:04,509  
program executes so on line 13 foo is
invoked so the scope of foo is created

44
00:01:04,509 --> 00:01:04,519  
invoked so the scope of foo is created
 

45
00:01:04,519 --> 00:01:08,190  
invoked so the scope of foo is created
and then taz is invoked inside of foo

46
00:01:08,190 --> 00:01:08,200  
and then taz is invoked inside of foo
 

47
00:01:08,200 --> 00:01:12,490  
and then taz is invoked inside of foo
let's see what values each scope has so

48
00:01:12,490 --> 00:01:12,500  
let's see what values each scope has so
 

49
00:01:12,500 --> 00:01:17,260  
let's see what values each scope has so
the global scope has the Foo function so

50
00:01:17,260 --> 00:01:17,270  
the global scope has the Foo function so
 

51
00:01:17,270 --> 00:01:21,789  
the global scope has the Foo function so
I'll write that in green the Foo

52
00:01:21,789 --> 00:01:21,799  
I'll write that in green the Foo
 

53
00:01:21,799 --> 00:01:24,580  
I'll write that in green the Foo
function or the foo scope has the

54
00:01:24,580 --> 00:01:24,590  
function or the foo scope has the
 

55
00:01:24,590 --> 00:01:29,020  
function or the foo scope has the
variable a and it has the Taz function

56
00:01:29,020 --> 00:01:29,030  
variable a and it has the Taz function
 

57
00:01:29,030 --> 00:01:34,300  
variable a and it has the Taz function
and last but not least the Taz function

58
00:01:34,300 --> 00:01:34,310  
and last but not least the Taz function
 

59
00:01:34,310 --> 00:01:40,690  
and last but not least the Taz function
has the variable Z now notice what's

60
00:01:40,690 --> 00:01:40,700  
has the variable Z now notice what's
 

61
00:01:40,700 --> 00:01:41,469  
has the variable Z now notice what's
happening here

62
00:01:41,469 --> 00:01:41,479  
happening here
 

63
00:01:41,479 --> 00:01:44,800  
happening here
the taz function tries using the

64
00:01:44,800 --> 00:01:44,810  
the taz function tries using the
 

65
00:01:44,810 --> 00:01:47,889  
the taz function tries using the
variable a but Taz itself doesn't have

66
00:01:47,889 --> 00:01:47,899  
variable a but Taz itself doesn't have
 

67
00:01:47,899 --> 00:01:50,440  
variable a but Taz itself doesn't have
the variable a so it looks to its outer

68
00:01:50,440 --> 00:01:50,450  
the variable a so it looks to its outer
 

69
00:01:50,450 --> 00:01:53,920  
the variable a so it looks to its outer
scope and its outer scope the closest

70
00:01:53,920 --> 00:01:53,930  
scope and its outer scope the closest
 

71
00:01:53,930 --> 00:01:56,350  
scope and its outer scope the closest
scope it has a reference to is the scope

72
00:01:56,350 --> 00:01:56,360  
scope it has a reference to is the scope
 

73
00:01:56,360 --> 00:01:59,679  
scope it has a reference to is the scope
of foo so it finds variable a there and

74
00:01:59,679 --> 00:01:59,689  
of foo so it finds variable a there and
 

75
00:01:59,689 --> 00:02:02,950  
of foo so it finds variable a there and
it uses it so hopefully this was a good

76
00:02:02,950 --> 00:02:02,960  
it uses it so hopefully this was a good
 

77
00:02:02,960 --> 00:02:05,770  
it uses it so hopefully this was a good
review from the last few videos and this

78
00:02:05,770 --> 00:02:05,780  
review from the last few videos and this
 

79
00:02:05,780 --> 00:02:07,899  
review from the last few videos and this
is actually where our closure happened

80
00:02:07,899 --> 00:02:07,909  
is actually where our closure happened
 

81
00:02:07,909 --> 00:02:10,240  
is actually where our closure happened
we have a function sitting inside of

82
00:02:10,240 --> 00:02:10,250  
we have a function sitting inside of
 

83
00:02:10,250 --> 00:02:13,080  
we have a function sitting inside of
another function and it's using a

84
00:02:13,080 --> 00:02:13,090  
another function and it's using a
 

85
00:02:13,090 --> 00:02:14,620  
another function and it's using a
variable

86
00:02:14,620 --> 00:02:14,630  
variable
 

87
00:02:14,630 --> 00:02:17,770  
variable
in its outer lexical environment or its

88
00:02:17,770 --> 00:02:17,780  
in its outer lexical environment or its
 

89
00:02:17,780 --> 00:02:20,380  
in its outer lexical environment or its
outer scope so this is where the closure

90
00:02:20,380 --> 00:02:20,390  
outer scope so this is where the closure
 

91
00:02:20,390 --> 00:02:24,790  
outer scope so this is where the closure
happened right here let's see if this is

92
00:02:24,790 --> 00:02:24,800  
happened right here let's see if this is
 

93
00:02:24,800 --> 00:02:27,490  
happened right here let's see if this is
true in our chrome console so I'm going

94
00:02:27,490 --> 00:02:27,500  
true in our chrome console so I'm going
 

95
00:02:27,500 --> 00:02:31,150  
true in our chrome console so I'm going
to get rid of my diagram and run this

96
00:02:31,150 --> 00:02:31,160  
to get rid of my diagram and run this
 

97
00:02:31,160 --> 00:02:35,170  
to get rid of my diagram and run this
code through the rubb browser and when i

98
00:02:35,170 --> 00:02:35,180  
code through the rubb browser and when i
 

99
00:02:35,180 --> 00:02:39,400  
code through the rubb browser and when i
refresh this page so let me just delete

100
00:02:39,400 --> 00:02:39,410  
refresh this page so let me just delete
 

101
00:02:39,410 --> 00:02:42,100  
refresh this page so let me just delete
this I'm going to refresh this no it is

102
00:02:42,100 --> 00:02:42,110  
this I'm going to refresh this no it is
 

103
00:02:42,110 --> 00:02:45,430  
this I'm going to refresh this no it is
a is log to the console because we're

104
00:02:45,430 --> 00:02:45,440  
a is log to the console because we're
 

105
00:02:45,440 --> 00:02:47,380  
a is log to the console because we're
accessing the variable a and logging it

106
00:02:47,380 --> 00:02:47,390  
accessing the variable a and logging it
 

107
00:02:47,390 --> 00:02:51,190  
accessing the variable a and logging it
from to the console great but I want to

108
00:02:51,190 --> 00:02:51,200  
from to the console great but I want to
 

109
00:02:51,200 --> 00:02:53,410  
from to the console great but I want to
show you a quick tip using the chrome

110
00:02:53,410 --> 00:02:53,420  
show you a quick tip using the chrome
 

111
00:02:53,420 --> 00:02:55,600  
show you a quick tip using the chrome
console I'm going to put the debugger

112
00:02:55,600 --> 00:02:55,610  
console I'm going to put the debugger
 

113
00:02:55,610 --> 00:02:58,060  
console I'm going to put the debugger
inside of my task function and our

114
00:02:58,060 --> 00:02:58,070  
inside of my task function and our
 

115
00:02:58,070 --> 00:03:00,490  
inside of my task function and our
chrome console will tell us whether or

116
00:03:00,490 --> 00:03:00,500  
chrome console will tell us whether or
 

117
00:03:00,500 --> 00:03:05,020  
chrome console will tell us whether or
not a closure was formed so when i

118
00:03:05,020 --> 00:03:05,030  
not a closure was formed so when i
 

119
00:03:05,030 --> 00:03:07,920  
not a closure was formed so when i
refresh this page and i zoom out a bit

120
00:03:07,920 --> 00:03:07,930  
refresh this page and i zoom out a bit
 

121
00:03:07,930 --> 00:03:12,460  
refresh this page and i zoom out a bit
notice in our scope section we have

122
00:03:12,460 --> 00:03:12,470  
notice in our scope section we have
 

123
00:03:12,470 --> 00:03:17,320  
notice in our scope section we have
local global and closure and the closure

124
00:03:17,320 --> 00:03:17,330  
local global and closure and the closure
 

125
00:03:17,330 --> 00:03:19,870  
local global and closure and the closure
was created with the variable a that's

126
00:03:19,870 --> 00:03:19,880  
was created with the variable a that's
 

127
00:03:19,880 --> 00:03:22,240  
was created with the variable a that's
what we're accessing and where are we

128
00:03:22,240 --> 00:03:22,250  
what we're accessing and where are we
 

129
00:03:22,250 --> 00:03:24,610  
what we're accessing and where are we
accessing it from we're accident from

130
00:03:24,610 --> 00:03:24,620  
accessing it from we're accident from
 

131
00:03:24,620 --> 00:03:29,200  
accessing it from we're accident from
Foos scope so let's say we didn't use

132
00:03:29,200 --> 00:03:29,210  
Foos scope so let's say we didn't use
 

133
00:03:29,210 --> 00:03:32,170  
Foos scope so let's say we didn't use
any values from foo with this closure

134
00:03:32,170 --> 00:03:32,180  
any values from foo with this closure
 

135
00:03:32,180 --> 00:03:34,720  
any values from foo with this closure
still be created let's say we were just

136
00:03:34,720 --> 00:03:34,730  
still be created let's say we were just
 

137
00:03:34,730 --> 00:03:38,410  
still be created let's say we were just
console logging the values e so if i

138
00:03:38,410 --> 00:03:38,420  
console logging the values e so if i
 

139
00:03:38,420 --> 00:03:42,460  
console logging the values e so if i
refresh this and look at this code now

140
00:03:42,460 --> 00:03:42,470  
refresh this and look at this code now
 

141
00:03:42,470 --> 00:03:45,190  
refresh this and look at this code now
in my debugger notice the difference

142
00:03:45,190 --> 00:03:45,200  
in my debugger notice the difference
 

143
00:03:45,200 --> 00:03:48,760  
in my debugger notice the difference
here function Taz is only making use of

144
00:03:48,760 --> 00:03:48,770  
here function Taz is only making use of
 

145
00:03:48,770 --> 00:03:51,250  
here function Taz is only making use of
its local scope so that closure was

146
00:03:51,250 --> 00:03:51,260  
its local scope so that closure was
 

147
00:03:51,260 --> 00:03:53,680  
its local scope so that closure was
never formed we never had a look up that

148
00:03:53,680 --> 00:03:53,690  
never formed we never had a look up that
 

149
00:03:53,690 --> 00:03:55,420  
never formed we never had a look up that
scope chain and look in our outer

150
00:03:55,420 --> 00:03:55,430  
scope chain and look in our outer
 

151
00:03:55,430 --> 00:03:58,660  
scope chain and look in our outer
lexical environment and make use of a so

152
00:03:58,660 --> 00:03:58,670  
lexical environment and make use of a so
 

153
00:03:58,670 --> 00:04:03,130  
lexical environment and make use of a so
we're not using Foos scope so we never

154
00:04:03,130 --> 00:04:03,140  
we're not using Foos scope so we never
 

155
00:04:03,140 --> 00:04:06,880  
we're not using Foos scope so we never
formed a closure so this was a review of

156
00:04:06,880 --> 00:04:06,890  
formed a closure so this was a review of
 

157
00:04:06,890 --> 00:04:09,610  
formed a closure so this was a review of
the last few videos and now let's move

158
00:04:09,610 --> 00:04:09,620  
the last few videos and now let's move
 

159
00:04:09,620 --> 00:04:12,160  
the last few videos and now let's move
on to a more practical example of using

160
00:04:12,160 --> 00:04:12,170  
on to a more practical example of using
 

161
00:04:12,170 --> 00:04:15,100  
on to a more practical example of using
a closure I'll get rid of my code here

162
00:04:15,100 --> 00:04:15,110  
a closure I'll get rid of my code here
 

163
00:04:15,110 --> 00:04:20,660  
a closure I'll get rid of my code here
and I have some more code below

164
00:04:20,660 --> 00:04:20,670  
 
 

165
00:04:20,670 --> 00:04:23,760  
 
here's another example of closure it

166
00:04:23,760 --> 00:04:23,770  
here's another example of closure it
 

167
00:04:23,770 --> 00:04:25,980  
here's another example of closure it
should look very familiar from our other

168
00:04:25,980 --> 00:04:25,990  
should look very familiar from our other
 

169
00:04:25,990 --> 00:04:30,240  
should look very familiar from our other
examples with one small twist here we

170
00:04:30,240 --> 00:04:30,250  
examples with one small twist here we
 

171
00:04:30,250 --> 00:04:32,130  
examples with one small twist here we
created a function named increment

172
00:04:32,130 --> 00:04:32,140  
created a function named increment
 

173
00:04:32,140 --> 00:04:36,240  
created a function named increment
creator and a num x called variable was

174
00:04:36,240 --> 00:04:36,250  
creator and a num x called variable was
 

175
00:04:36,250 --> 00:04:39,210  
creator and a num x called variable was
defined and assigned to the value 0 now

176
00:04:39,210 --> 00:04:39,220  
defined and assigned to the value 0 now
 

177
00:04:39,220 --> 00:04:42,330  
defined and assigned to the value 0 now
we have a function which uses increment

178
00:04:42,330 --> 00:04:42,340  
we have a function which uses increment
 

179
00:04:42,340 --> 00:04:44,960  
we have a function which uses increment
I'm sorry which uses num x called and

180
00:04:44,960 --> 00:04:44,970  
I'm sorry which uses num x called and
 

181
00:04:44,970 --> 00:04:48,840  
I'm sorry which uses num x called and
increment it by 1 this function will

182
00:04:48,840 --> 00:04:48,850  
increment it by 1 this function will
 

183
00:04:48,850 --> 00:04:51,960  
increment it by 1 this function will
also then console.log the value of num x

184
00:04:51,960 --> 00:04:51,970  
also then console.log the value of num x
 

185
00:04:51,970 --> 00:04:56,370  
also then console.log the value of num x
called but here is the trick and here

186
00:04:56,370 --> 00:04:56,380  
called but here is the trick and here
 

187
00:04:56,380 --> 00:04:59,150  
called but here is the trick and here
where things is slightly different on

188
00:04:59,150 --> 00:04:59,160  
where things is slightly different on
 

189
00:04:59,160 --> 00:05:04,110  
where things is slightly different on
line 10 the Inc function is returned out

190
00:05:04,110 --> 00:05:04,120  
line 10 the Inc function is returned out
 

191
00:05:04,120 --> 00:05:07,650  
line 10 the Inc function is returned out
of our increment creator function so

192
00:05:07,650 --> 00:05:07,660  
of our increment creator function so
 

193
00:05:07,660 --> 00:05:09,780  
of our increment creator function so
just like objects numbers and strings

194
00:05:09,780 --> 00:05:09,790  
just like objects numbers and strings
 

195
00:05:09,790 --> 00:05:12,690  
just like objects numbers and strings
you can return functions from other

196
00:05:12,690 --> 00:05:12,700  
you can return functions from other
 

197
00:05:12,700 --> 00:05:14,850  
you can return functions from other
functions and this is the idea of

198
00:05:14,850 --> 00:05:14,860  
functions and this is the idea of
 

199
00:05:14,860 --> 00:05:18,570  
functions and this is the idea of
higher-order functions there's a video

200
00:05:18,570 --> 00:05:18,580  
higher-order functions there's a video
 

201
00:05:18,580 --> 00:05:21,510  
higher-order functions there's a video
dedicated to this idea so I highly

202
00:05:21,510 --> 00:05:21,520  
dedicated to this idea so I highly
 

203
00:05:21,520 --> 00:05:25,550  
dedicated to this idea so I highly
suggest reviewing it so since we are

204
00:05:25,550 --> 00:05:25,560  
suggest reviewing it so since we are
 

205
00:05:25,560 --> 00:05:28,830  
suggest reviewing it so since we are
returning Inc function my question to

206
00:05:28,830 --> 00:05:28,840  
returning Inc function my question to
 

207
00:05:28,840 --> 00:05:31,500  
returning Inc function my question to
you is since it's no longer sitting

208
00:05:31,500 --> 00:05:31,510  
you is since it's no longer sitting
 

209
00:05:31,510 --> 00:05:34,860  
you is since it's no longer sitting
inside of the increment creator scope

210
00:05:34,860 --> 00:05:34,870  
inside of the increment creator scope
 

211
00:05:34,870 --> 00:05:39,690  
inside of the increment creator scope
where num times called is created will

212
00:05:39,690 --> 00:05:39,700  
where num times called is created will
 

213
00:05:39,700 --> 00:05:42,840  
where num times called is created will
it still have access to num x called

214
00:05:42,840 --> 00:05:42,850  
it still have access to num x called
 

215
00:05:42,850 --> 00:05:45,120  
it still have access to num x called
inside of itself or inside of its own

216
00:05:45,120 --> 00:05:45,130  
inside of itself or inside of its own
 

217
00:05:45,130 --> 00:05:50,820  
inside of itself or inside of its own
scope let's take a look at this so in my

218
00:05:50,820 --> 00:05:50,830  
scope let's take a look at this so in my
 

219
00:05:50,830 --> 00:05:53,550  
scope let's take a look at this so in my
browser I'm going to refresh it and the

220
00:05:53,550 --> 00:05:53,560  
browser I'm going to refresh it and the
 

221
00:05:53,560 --> 00:05:55,650  
browser I'm going to refresh it and the
name of the function we want to invoke

222
00:05:55,650 --> 00:05:55,660  
name of the function we want to invoke
 

223
00:05:55,660 --> 00:05:59,550  
name of the function we want to invoke
is increment Creator and I will create a

224
00:05:59,550 --> 00:05:59,560  
is increment Creator and I will create a
 

225
00:05:59,560 --> 00:06:04,230  
is increment Creator and I will create a
variable called return func and this is

226
00:06:04,230 --> 00:06:04,240  
variable called return func and this is
 

227
00:06:04,240 --> 00:06:06,690  
variable called return func and this is
the variable that stores the value

228
00:06:06,690 --> 00:06:06,700  
the variable that stores the value
 

229
00:06:06,700 --> 00:06:10,140  
the variable that stores the value
returned from increment to creator which

230
00:06:10,140 --> 00:06:10,150  
returned from increment to creator which
 

231
00:06:10,150 --> 00:06:11,190  
returned from increment to creator which
is the ink func

232
00:06:11,190 --> 00:06:11,200  
is the ink func
 

233
00:06:11,200 --> 00:06:14,400  
is the ink func
and actually let me rename this all is

234
00:06:14,400 --> 00:06:14,410  
and actually let me rename this all is
 

235
00:06:14,410 --> 00:06:17,760  
and actually let me rename this all is
call this in func as well so we invoke

236
00:06:17,760 --> 00:06:17,770  
call this in func as well so we invoke
 

237
00:06:17,770 --> 00:06:21,180  
call this in func as well so we invoke
increment Creator and increment creator

238
00:06:21,180 --> 00:06:21,190  
increment Creator and increment creator
 

239
00:06:21,190 --> 00:06:26,190  
increment Creator and increment creator
returns the function Inc func so what

240
00:06:26,190 --> 00:06:26,200  
returns the function Inc func so what
 

241
00:06:26,200 --> 00:06:30,000  
returns the function Inc func so what
should in func do now let me first prove

242
00:06:30,000 --> 00:06:30,010  
should in func do now let me first prove
 

243
00:06:30,010 --> 00:06:32,070  
should in func do now let me first prove
to you that it is a function and I'll

244
00:06:32,070 --> 00:06:32,080  
to you that it is a function and I'll
 

245
00:06:32,080 --> 00:06:33,749  
to you that it is a function and I'll
call the to string method on it

246
00:06:33,749 --> 00:06:33,759  
call the to string method on it
 

247
00:06:33,759 --> 00:06:36,239  
call the to string method on it
so we can see it's code body notice it's

248
00:06:36,239 --> 00:06:36,249  
so we can see it's code body notice it's
 

249
00:06:36,249 --> 00:06:38,040  
so we can see it's code body notice it's
a function and it's supposed to

250
00:06:38,040 --> 00:06:38,050  
a function and it's supposed to
 

251
00:06:38,050 --> 00:06:40,019  
a function and it's supposed to
increment sometimes called

252
00:06:40,019 --> 00:06:40,029  
increment sometimes called
 

253
00:06:40,029 --> 00:06:44,309  
increment sometimes called
and then console.log num times call but

254
00:06:44,309 --> 00:06:44,319  
and then console.log num times call but
 

255
00:06:44,319 --> 00:06:46,980  
and then console.log num times call but
notice inside of this function num times

256
00:06:46,980 --> 00:06:46,990  
notice inside of this function num times
 

257
00:06:46,990 --> 00:06:49,860  
notice inside of this function num times
called isn't declared anywhere right

258
00:06:49,860 --> 00:06:49,870  
called isn't declared anywhere right
 

259
00:06:49,870 --> 00:06:52,379  
called isn't declared anywhere right
there isn't a VAR num Times called

260
00:06:52,379 --> 00:06:52,389  
there isn't a VAR num Times called
 

261
00:06:52,389 --> 00:06:55,200  
there isn't a VAR num Times called
equals zero anywhere so you would

262
00:06:55,200 --> 00:06:55,210  
equals zero anywhere so you would
 

263
00:06:55,210 --> 00:06:57,239  
equals zero anywhere so you would
probably anticipate that when we call

264
00:06:57,239 --> 00:06:57,249  
probably anticipate that when we call
 

265
00:06:57,249 --> 00:06:58,969  
probably anticipate that when we call
Inc func

266
00:06:58,969 --> 00:06:58,979  
Inc func
 

267
00:06:58,979 --> 00:07:02,429  
Inc func
we get some type of error that num times

268
00:07:02,429 --> 00:07:02,439  
we get some type of error that num times
 

269
00:07:02,439 --> 00:07:06,629  
we get some type of error that num times
call does not defined but notice the

270
00:07:06,629 --> 00:07:06,639  
call does not defined but notice the
 

271
00:07:06,639 --> 00:07:07,920  
call does not defined but notice the
value 1 is locked

272
00:07:07,920 --> 00:07:07,930  
value 1 is locked
 

273
00:07:07,930 --> 00:07:12,029  
value 1 is locked
meaning somehow we held or still have a

274
00:07:12,029 --> 00:07:12,039  
meaning somehow we held or still have a
 

275
00:07:12,039 --> 00:07:16,079  
meaning somehow we held or still have a
reference to num times called and we do

276
00:07:16,079 --> 00:07:16,089  
reference to num times called and we do
 

277
00:07:16,089 --> 00:07:19,320  
reference to num times called and we do
because of a closure so it doesn't

278
00:07:19,320 --> 00:07:19,330  
because of a closure so it doesn't
 

279
00:07:19,330 --> 00:07:22,610  
because of a closure so it doesn't
matter whether or not this function is

280
00:07:22,610 --> 00:07:22,620  
matter whether or not this function is
 

281
00:07:22,620 --> 00:07:26,670  
matter whether or not this function is
used inside of increment creator like in

282
00:07:26,670 --> 00:07:26,680  
used inside of increment creator like in
 

283
00:07:26,680 --> 00:07:30,360  
used inside of increment creator like in
our other examples since it was created

284
00:07:30,360 --> 00:07:30,370  
our other examples since it was created
 

285
00:07:30,370 --> 00:07:36,299  
our other examples since it was created
inside of the increment creator scope it

286
00:07:36,299 --> 00:07:36,309  
inside of the increment creator scope it
 

287
00:07:36,309 --> 00:07:39,689  
inside of the increment creator scope it
will always have access to the variables

288
00:07:39,689 --> 00:07:39,699  
will always have access to the variables
 

289
00:07:39,699 --> 00:07:45,389  
will always have access to the variables
and values it used in that scope and the

290
00:07:45,389 --> 00:07:45,399  
and values it used in that scope and the
 

291
00:07:45,399 --> 00:07:48,659  
and values it used in that scope and the
the scope of a I'm sorry the scope of

292
00:07:48,659 --> 00:07:48,669  
the scope of a I'm sorry the scope of
 

293
00:07:48,669 --> 00:07:51,360  
the scope of a I'm sorry the scope of
increment Creator is stored in something

294
00:07:51,360 --> 00:07:51,370  
increment Creator is stored in something
 

295
00:07:51,370 --> 00:07:53,820  
increment Creator is stored in something
called the heap which we aren't going to

296
00:07:53,820 --> 00:07:53,830  
called the heap which we aren't going to
 

297
00:07:53,830 --> 00:07:57,869  
called the heap which we aren't going to
get into now but it's not lost it's not

298
00:07:57,869 --> 00:07:57,879  
get into now but it's not lost it's not
 

299
00:07:57,879 --> 00:08:00,179  
get into now but it's not lost it's not
just erased from the JavaScript runtime

300
00:08:00,179 --> 00:08:00,189  
just erased from the JavaScript runtime
 

301
00:08:00,189 --> 00:08:02,489  
just erased from the JavaScript runtime
environment the JavaScript runtime

302
00:08:02,489 --> 00:08:02,499  
environment the JavaScript runtime
 

303
00:08:02,499 --> 00:08:06,029  
environment the JavaScript runtime
environment saves that scope so we can

304
00:08:06,029 --> 00:08:06,039  
environment saves that scope so we can
 

305
00:08:06,039 --> 00:08:12,269  
environment saves that scope so we can
access it later so the ink func is still

306
00:08:12,269 --> 00:08:12,279  
access it later so the ink func is still
 

307
00:08:12,279 --> 00:08:14,579  
access it later so the ink func is still
looking up at scope t chain thanks to a

308
00:08:14,579 --> 00:08:14,589  
looking up at scope t chain thanks to a
 

309
00:08:14,589 --> 00:08:16,889  
looking up at scope t chain thanks to a
closure which was formed and it has

310
00:08:16,889 --> 00:08:16,899  
closure which was formed and it has
 

311
00:08:16,899 --> 00:08:20,279  
closure which was formed and it has
access to dump times called so let's see

312
00:08:20,279 --> 00:08:20,289  
access to dump times called so let's see
 

313
00:08:20,289 --> 00:08:24,420  
access to dump times called so let's see
that in the chrome console what I'll do

314
00:08:24,420 --> 00:08:24,430  
that in the chrome console what I'll do
 

315
00:08:24,430 --> 00:08:29,309  
that in the chrome console what I'll do
here is inside of let's say I'm going to

316
00:08:29,309 --> 00:08:29,319  
here is inside of let's say I'm going to
 

317
00:08:29,319 --> 00:08:31,199  
here is inside of let's say I'm going to
do a deep inspection sorry I had to

318
00:08:31,199 --> 00:08:31,209  
do a deep inspection sorry I had to
 

319
00:08:31,209 --> 00:08:33,120  
do a deep inspection sorry I had to
gather my thoughts there I'll do a deep

320
00:08:33,120 --> 00:08:33,130  
gather my thoughts there I'll do a deep
 

321
00:08:33,130 --> 00:08:36,180  
gather my thoughts there I'll do a deep
inspection on ink func and I want to

322
00:08:36,180 --> 00:08:36,190  
inspection on ink func and I want to
 

323
00:08:36,190 --> 00:08:40,079  
inspection on ink func and I want to
look at its scopes so notice there's a

324
00:08:40,079 --> 00:08:40,089  
look at its scopes so notice there's a
 

325
00:08:40,089 --> 00:08:42,929  
look at its scopes so notice there's a
closure so this is part of its scope

326
00:08:42,929 --> 00:08:42,939  
closure so this is part of its scope
 

327
00:08:42,939 --> 00:08:44,759  
closure so this is part of its scope
chain and it's reaching this closure

328
00:08:44,759 --> 00:08:44,769  
chain and it's reaching this closure
 

329
00:08:44,769 --> 00:08:47,650  
chain and it's reaching this closure
from the increment creator function

330
00:08:47,650 --> 00:08:47,660  
from the increment creator function
 

331
00:08:47,660 --> 00:08:49,930  
from the increment creator function
and inside of that increment creator

332
00:08:49,930 --> 00:08:49,940  
and inside of that increment creator
 

333
00:08:49,940 --> 00:08:55,000  
and inside of that increment creator
function is where num times was defined

334
00:08:55,000 --> 00:08:55,010  
function is where num times was defined
 

335
00:08:55,010 --> 00:08:57,250  
function is where num times was defined
I'm sorry num times called was defined

336
00:08:57,250 --> 00:08:57,260  
I'm sorry num times called was defined
 

337
00:08:57,260 --> 00:08:59,050  
I'm sorry num times called was defined
right it was a Stan shader and assigned

338
00:08:59,050 --> 00:08:59,060  
right it was a Stan shader and assigned
 

339
00:08:59,060 --> 00:09:01,570  
right it was a Stan shader and assigned
to zero but since we invoked it at least

340
00:09:01,570 --> 00:09:01,580  
to zero but since we invoked it at least
 

341
00:09:01,580 --> 00:09:04,600  
to zero but since we invoked it at least
one time the value of it is now 1 and if

342
00:09:04,600 --> 00:09:04,610  
one time the value of it is now 1 and if
 

343
00:09:04,610 --> 00:09:06,880  
one time the value of it is now 1 and if
we look inside of this notice sometimes

344
00:09:06,880 --> 00:09:06,890  
we look inside of this notice sometimes
 

345
00:09:06,890 --> 00:09:12,220  
we look inside of this notice sometimes
called as 1 so this is the idea of

346
00:09:12,220 --> 00:09:12,230  
called as 1 so this is the idea of
 

347
00:09:12,230 --> 00:09:16,540  
called as 1 so this is the idea of
closure even if we return a function out

348
00:09:16,540 --> 00:09:16,550  
closure even if we return a function out
 

349
00:09:16,550 --> 00:09:20,020  
closure even if we return a function out
of another function but it was created

350
00:09:20,020 --> 00:09:20,030  
of another function but it was created
 

351
00:09:20,030 --> 00:09:23,830  
of another function but it was created
and defined inside of that scope if it

352
00:09:23,830 --> 00:09:23,840  
and defined inside of that scope if it
 

353
00:09:23,840 --> 00:09:26,560  
and defined inside of that scope if it
used any values from its surrounding

354
00:09:26,560 --> 00:09:26,570  
used any values from its surrounding
 

355
00:09:26,570 --> 00:09:29,350  
used any values from its surrounding
scope it will remember that chain and

356
00:09:29,350 --> 00:09:29,360  
scope it will remember that chain and
 

357
00:09:29,360 --> 00:09:31,720  
scope it will remember that chain and
remember all the variables that it had

358
00:09:31,720 --> 00:09:31,730  
remember all the variables that it had
 

359
00:09:31,730 --> 00:09:34,360  
remember all the variables that it had
access to and it will be able to call

360
00:09:34,360 --> 00:09:34,370  
access to and it will be able to call
 

361
00:09:34,370 --> 00:09:38,680  
access to and it will be able to call
them later on so I hope you enjoyed this

362
00:09:38,680 --> 00:09:38,690  
them later on so I hope you enjoyed this
 

363
00:09:38,690 --> 00:09:40,270  
them later on so I hope you enjoyed this
small introduction and light

364
00:09:40,270 --> 00:09:40,280  
small introduction and light
 

365
00:09:40,280 --> 00:09:42,520  
small introduction and light
introduction to closure there's a lot of

366
00:09:42,520 --> 00:09:42,530  
introduction to closure there's a lot of
 

367
00:09:42,530 --> 00:09:44,470  
introduction to closure there's a lot of
great practice exercises and tests first

368
00:09:44,470 --> 00:09:44,480  
great practice exercises and tests first
 

369
00:09:44,480 --> 00:09:46,840  
great practice exercises and tests first
so I hope you enjoy working through

370
00:09:46,840 --> 00:09:46,850  
so I hope you enjoy working through
 

371
00:09:46,850 --> 00:09:49,030  
so I hope you enjoy working through
those